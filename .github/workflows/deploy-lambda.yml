name: Deployment of infrastructure for Birthday Tracker API (Lambda)

# All params must be provided to trigger
on:
  workflow_call:
    inputs:
      # Stack name to be used in Cloudformation within AWS
      stack_name:
        required: true
        type: string
        description: Cloudformation stack name
      # Environment name to be used
      environment:
        required: true
        type: string
        description: Env name used in API Gateway stage
      # S3 bucket name where code should be uploaded
      s3_bucket_name:
        required: true
        type: string
      # Name of file that should be uploaded to s3 bucket
      lambda_zip_file:
        required: true
        type: string
      # Appended to resource titles in AWS to ensure uniqueness (and avoid clashes)
      resource_suffix:
        required: true
        type: string
        description: Appended to end of resource names to ensure uniqueness (for dev env)
    secrets:
      # Secrets are required to authenticate to AWS
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      DB_ADMIN_PASSWORD:
        required: true

jobs:
  # This job first packages the code, uploads to s3 bucket, then calls the cloudformation stack
  deploy_cloudformation_stack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Package code for Lambda
        run: |
          echo "Installing pymysql dependency"
          mkdir -p package
          pip install pymysql -t package/
          echo "Zipping artefact: ${{inputs.lambda_zip_file}}"
          cp index.py package/
          cd package
          zip -r ../${{inputs.lambda_zip_file}} .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3 ls "s3://${{ inputs.s3_bucket_name }}" 2>/dev/null; then
            echo "Bucket does not exist. Creating..."
            aws s3 mb s3://${{inputs.s3_bucket_name}} --no-cli-pager
          else
            echo "Bucket already exists"
          fi
      - name: Upload code for Lambda to S3 bucket
        run: |
          aws s3 cp ${{inputs.lambda_zip_file}} s3://${{inputs.s3_bucket_name}}/${{inputs.lambda_zip_file}}
          echo "Packaged code for lambda uploaded successfully"

      - name: Set deployment timestamp
        id: set_timestamp
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Deploy CloudFormation Stack (${{inputs.stack_name}})
        run: |
          aws cloudformation deploy \
            --stack-name ${{ inputs.stack_name }} \
            --template-file l00196611-lambda-api.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              LambdaCodeBucket=${{ inputs.s3_bucket_name }} \
              LambdaCodeBucketKey=${{ inputs.lambda_zip_file }} \
              DBUsername=admin \
              DBName=birthdayDb \
              LambdaRuntime=python3.12 \
              LambdaArchitecture=x86_64 \
              DBPassword=${{ secrets.DB_ADMIN_PASSWORD }} \
              EnvironmentName=${{ inputs.environment }} \
              ResourceSuffix=${{ inputs.resource_suffix }} \
              DeploymentId=${{ steps.set_timestamp.outputs.timestamp }}
